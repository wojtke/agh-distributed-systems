# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stock_exchange_pb2 as stock__exchange__pb2


class StockExchangeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
            '/stock_exchange.StockExchange/Subscribe',
            request_serializer=stock__exchange__pb2.SubRequest.SerializeToString,
            response_deserializer=stock__exchange__pb2.StockDataResponse.FromString,
        )
        self.SubscribeOnPctChange = channel.unary_stream(
            '/stock_exchange.StockExchange/SubscribeOnPctChange',
            request_serializer=stock__exchange__pb2.SubPctChangeRequest.SerializeToString,
            response_deserializer=stock__exchange__pb2.StockDataResponse.FromString,
        )
        self.Ping = channel.unary_unary(
            '/stock_exchange.StockExchange/Ping',
            request_serializer=stock__exchange__pb2.Empty.SerializeToString,
            response_deserializer=stock__exchange__pb2.Empty.FromString,
        )


class StockExchangeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeOnPctChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockExchangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Subscribe': grpc.unary_stream_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=stock__exchange__pb2.SubRequest.FromString,
            response_serializer=stock__exchange__pb2.StockDataResponse.SerializeToString,
        ),
        'SubscribeOnPctChange': grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeOnPctChange,
            request_deserializer=stock__exchange__pb2.SubPctChangeRequest.FromString,
            response_serializer=stock__exchange__pb2.StockDataResponse.SerializeToString,
        ),
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=stock__exchange__pb2.Empty.FromString,
            response_serializer=stock__exchange__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'stock_exchange.StockExchange', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class StockExchange(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Subscribe(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stock_exchange.StockExchange/Subscribe',
                                              stock__exchange__pb2.SubRequest.SerializeToString,
                                              stock__exchange__pb2.StockDataResponse.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout,
                                              metadata)

    @staticmethod
    def SubscribeOnPctChange(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stock_exchange.StockExchange/SubscribeOnPctChange',
                                              stock__exchange__pb2.SubPctChangeRequest.SerializeToString,
                                              stock__exchange__pb2.StockDataResponse.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout,
                                              metadata)

    @staticmethod
    def Ping(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stock_exchange.StockExchange/Ping',
                                             stock__exchange__pb2.Empty.SerializeToString,
                                             stock__exchange__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
