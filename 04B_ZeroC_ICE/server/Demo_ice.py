# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Demo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

_M_Demo._t_GlobalCounter = IcePy.defineValue('::Demo::GlobalCounter', Ice.Value, -1, (), False, True, None, ())

if 'GlobalCounterPrx' not in _M_Demo.__dict__:
    _M_Demo.GlobalCounterPrx = Ice.createTempClass()


    class GlobalCounterPrx(Ice.ObjectPrx):

        def increment(self, context=None):
            return _M_Demo.GlobalCounter._op_increment.invoke(self, ((), context))

        def incrementAsync(self, context=None):
            return _M_Demo.GlobalCounter._op_increment.invokeAsync(self, ((), context))

        def begin_increment(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.GlobalCounter._op_increment.begin(self, ((), _response, _ex, _sent, context))

        def end_increment(self, _r):
            return _M_Demo.GlobalCounter._op_increment.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.GlobalCounterPrx.ice_checkedCast(proxy, '::Demo::GlobalCounter', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.GlobalCounterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::GlobalCounter'


    _M_Demo._t_GlobalCounterPrx = IcePy.defineProxy('::Demo::GlobalCounter', GlobalCounterPrx)

    _M_Demo.GlobalCounterPrx = GlobalCounterPrx
    del GlobalCounterPrx

    _M_Demo.GlobalCounter = Ice.createTempClass()


    class GlobalCounter(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::GlobalCounter', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::GlobalCounter'

        @staticmethod
        def ice_staticId():
            return '::Demo::GlobalCounter'

        def increment(self, current=None):
            raise NotImplementedError("servant method 'increment' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_GlobalCounterDisp)

        __repr__ = __str__


    _M_Demo._t_GlobalCounterDisp = IcePy.defineClass('::Demo::GlobalCounter', GlobalCounter, (), None, ())
    GlobalCounter._ice_type = _M_Demo._t_GlobalCounterDisp

    GlobalCounter._op_increment = IcePy.Operation('increment', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                  False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.GlobalCounter = GlobalCounter
    del GlobalCounter

_M_Demo._t_Notepad = IcePy.defineValue('::Demo::Notepad', Ice.Value, -1, (), False, True, None, ())

if 'NotepadPrx' not in _M_Demo.__dict__:
    _M_Demo.NotepadPrx = Ice.createTempClass()


    class NotepadPrx(Ice.ObjectPrx):

        def write(self, text, context=None):
            return _M_Demo.Notepad._op_write.invoke(self, ((text,), context))

        def writeAsync(self, text, context=None):
            return _M_Demo.Notepad._op_write.invokeAsync(self, ((text,), context))

        def begin_write(self, text, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Notepad._op_write.begin(self, ((text,), _response, _ex, _sent, context))

        def end_write(self, _r):
            return _M_Demo.Notepad._op_write.end(self, _r)

        def read(self, context=None):
            return _M_Demo.Notepad._op_read.invoke(self, ((), context))

        def readAsync(self, context=None):
            return _M_Demo.Notepad._op_read.invokeAsync(self, ((), context))

        def begin_read(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Notepad._op_read.begin(self, ((), _response, _ex, _sent, context))

        def end_read(self, _r):
            return _M_Demo.Notepad._op_read.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.NotepadPrx.ice_checkedCast(proxy, '::Demo::Notepad', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.NotepadPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Notepad'


    _M_Demo._t_NotepadPrx = IcePy.defineProxy('::Demo::Notepad', NotepadPrx)

    _M_Demo.NotepadPrx = NotepadPrx
    del NotepadPrx

    _M_Demo.Notepad = Ice.createTempClass()


    class Notepad(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Notepad', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Notepad'

        @staticmethod
        def ice_staticId():
            return '::Demo::Notepad'

        def write(self, text, current=None):
            raise NotImplementedError("servant method 'write' not implemented")

        def read(self, current=None):
            raise NotImplementedError("servant method 'read' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_NotepadDisp)

        __repr__ = __str__


    _M_Demo._t_NotepadDisp = IcePy.defineClass('::Demo::Notepad', Notepad, (), None, ())
    Notepad._ice_type = _M_Demo._t_NotepadDisp

    Notepad._op_write = IcePy.Operation('write', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (((), IcePy._t_string, False, 0),), (), None, ())
    Notepad._op_read = IcePy.Operation('read', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (),
                                       (), ((), IcePy._t_string, False, 0), ())

    _M_Demo.Notepad = Notepad
    del Notepad

_M_Demo._t_TextParser = IcePy.defineValue('::Demo::TextParser', Ice.Value, -1, (), False, True, None, ())

if 'TextParserPrx' not in _M_Demo.__dict__:
    _M_Demo.TextParserPrx = Ice.createTempClass()


    class TextParserPrx(Ice.ObjectPrx):

        def parse(self, text, context=None):
            return _M_Demo.TextParser._op_parse.invoke(self, ((text,), context))

        def parseAsync(self, text, context=None):
            return _M_Demo.TextParser._op_parse.invokeAsync(self, ((text,), context))

        def begin_parse(self, text, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.TextParser._op_parse.begin(self, ((text,), _response, _ex, _sent, context))

        def end_parse(self, _r):
            return _M_Demo.TextParser._op_parse.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.TextParserPrx.ice_checkedCast(proxy, '::Demo::TextParser', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.TextParserPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::TextParser'


    _M_Demo._t_TextParserPrx = IcePy.defineProxy('::Demo::TextParser', TextParserPrx)

    _M_Demo.TextParserPrx = TextParserPrx
    del TextParserPrx

    _M_Demo.TextParser = Ice.createTempClass()


    class TextParser(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::TextParser', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::TextParser'

        @staticmethod
        def ice_staticId():
            return '::Demo::TextParser'

        def parse(self, text, current=None):
            raise NotImplementedError("servant method 'parse' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_TextParserDisp)

        __repr__ = __str__


    _M_Demo._t_TextParserDisp = IcePy.defineClass('::Demo::TextParser', TextParser, (), None, ())
    TextParser._ice_type = _M_Demo._t_TextParserDisp

    TextParser._op_parse = IcePy.Operation('parse', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                           (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.TextParser = TextParser
    del TextParser

# End of module Demo
